# Release Notes and Installation Guide for Audio Streaming Project

## Overview

This project enables audio streaming from a host PC (likely Windows) to a Raspberry Pi over a network. The host PC will capture audio input using a virtual audio cable and stream it to the Raspberry Pi, which will play the audio. Both the host and receiver programs are set to run as services for continuous operation. 

## Contents
- Host Script (`host_audio_stream.py`)
- Receiver Script (`receiver_audio_play.py`)
- Virtual Audio Cable Installation for Windows
- Installation and Setup Instructions for Host PC (Windows)
- Installation and Setup Instructions for Raspberry Pi
- Configuring Services
- Troubleshooting

## Prerequisites
- Python installed on both host PC and Raspberry Pi
- Network connection between host PC and Raspberry Pi
- Basic knowledge of command line interface

## Step-by-Step Guide

### Host PC (Windows) Setup

1. **Install Virtual Audio Cable**:
   - Download the Virtual Audio Cable from [here](https://download.vb-audio.com/Download_CABLE/VBCABLE_Driver_Pack43.zip).
   - Extract the ZIP file and run the installer (`VBCABLE_Setup_x64.exe` for 64-bit Windows or `VBCABLE_Setup.exe` for 32-bit Windows).
   - Follow the installation prompts to complete the setup.

2. **Python Installation**:
   - Download and install Python from the official [Python website](https://www.python.org/downloads/).
   - Ensure you select the option to add Python to your PATH during installation.

3. **Install Required Python Libraries**:
   - Open Command Prompt and run the following command to install the required libraries:
     ```bash
     pip install pyaudio
     ```

4. **Download and Configure Host Script**:
   - Create a new file named `host_audio_stream.py` and copy the following script:
     ```python
     import socket
     import pyaudio

     CHUNK = 1024
     FORMAT = pyaudio.paInt16
     CHANNELS = 2
     RATE = 44100

     p = pyaudio.PyAudio()
     stream = p.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)

     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
     s.connect(('192.168.1.246', 50007))  # Replace with the IP address of the Raspberry Pi

     try:
         while True:
             data = stream.read(CHUNK)
             s.sendall(data)
     except KeyboardInterrupt:
         pass

     stream.stop_stream()
     stream.close()
     p.terminate()
     s.close()
     ```

5. **Run Host Script as a Service**:
   - Use a tool like NSSM (Non-Sucking Service Manager) to create a Windows service for the script:
     - Download NSSM from [here](https://nssm.cc/download).
     - Extract the ZIP file and place `nssm.exe` in a convenient location.
     - Open Command Prompt as Administrator and run the following commands:
       ```bash
       nssm install AudioStreamService "C:\Path\To\Python.exe" "C:\Path\To\host_audio_stream.py"
       nssm start AudioStreamService
       ```

### Receiver (Raspberry Pi) Setup

1. **Python Installation**:
   - Ensure Python is installed on the Raspberry Pi. Use the following commands to install Python and pip if not already installed:
     ```bash
     sudo apt-get update
     sudo apt-get install python3 python3-pip
     ```

2. **Install Required Python Libraries**:
   - Install the required libraries using pip:
     ```bash
     pip3 install pyaudio
     ```

3. **Download and Configure Receiver Script**:
   - Create a new file named `receiver_audio_play.py` and put it on the rasbery the following script:
     ```python
     import socket
     import pyaudio

     CHUNK = 1024
     FORMAT = pyaudio.paInt16
     CHANNELS = 2
     RATE = 44100

     p = pyaudio.PyAudio()
     stream = p.open(format=FORMAT, channels=CHANNELS, rate=RATE, output=True, frames_per_buffer=CHUNK)

     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
     s.bind(('0.0.0.0', 50007))
     s.listen(1)

     conn, addr = s.accept()
     print("Connected by", addr)

     try:
         while True:
             data = conn.recv(CHUNK)
             stream.write(data)
     except KeyboardInterrupt:
         pass

     stream.stop_stream()
     stream.close()
     p.terminate()
     conn.close()
     ```

4. **Configure Receiver Script to Run on Startup**:
   - Edit the `rc.local` file to run the script on startup:
     ```bash
     sudo nano /etc/rc.local
     ```
   - Add the following line before the `exit 0` line:
     ```bash
     python3 /path/to/receiver_audio_play.py &
     ```

5. **Reboot the Raspberry Pi**:
   - Reboot to apply the changes:
     ```bash
     sudo reboot
     ```

## Troubleshooting

- **Audio Issues**:
  - Ensure the virtual audio cable is set as the default recording device on the host PC.
  - Verify network connectivity between the host PC and Raspberry Pi.

- **Service Issues**:
  - Check the status of the services using:
    - Windows: `nssm status AudioStreamService`
    - Raspberry Pi: `sudo systemctl status rc-local`

- **Script Errors**:
  - Verify the IP addresses and port numbers are correctly set in both scripts.
  - Ensure all required Python libraries are installed.

By following these steps, you should be able to set up and run the audio streaming project effectively. If you encounter any issues, refer to the troubleshooting section or seek help from an IT professional.